"""
Demonstration of google language, vision model using google Generative AI package and Langchain
"""

import os
import logging
import google.generativeai as genai
from langchain_google_genai import GoogleGenerativeAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from vertexai.vision_models import ImageGenerationModel
from pydantic import BaseModel, Field

class Joke(BaseModel):
    joke: dict = Field(..., title="Style", description="Joke text generated by the emodel")


def get_joke_topic() -> str:
    """
    Returns a random topic using gemini model
    - purpose is to test working of gemini model using google Generative AI package
    """
        
    try:
        # Use gemini model to get random topic
        model = genai.GenerativeModel(os.getenv('LANGUAGE_MODEL'))
        message = "Suggest a random topic today to explore! topic should be one or two words only"
        topic = model.generate_content(message).text
    except Exception as e:
        logging.info("Error getting joke topic from gemini model")
        raise e
    
    return topic

def get_joke(joke_topic: str) -> dict:
    """
    Utilize langchain to interact with google Gemini model,
    to get random joke on the provided joke topic
    
    """

    try:
        # Use langchain to generate a random joke on the topic from model
        llm = GoogleGenerativeAI(model=os.getenv('LANGUAGE_MODEL'))
        parser = JsonOutputParser(pydantic_object=Joke)

        prompt = PromptTemplate(
            template="Generate a on topic {topic}, and return the joke text as JSON with key as 'joke' and joke text as value",
            input_variables=["topic"],
            partial_variables={"format_instructions": parser.get_format_instructions()},
        )

        chain = prompt | llm | parser
        llm_response = chain.invoke(
            {"topic": joke_topic},
        )

        return llm_response

    except Exception as e:
        logging.info("Error using langchain with google gemini model to generate joke from topic")
        raise e
    
def get_image_for_joke(joke: str):
    """Generate an image using google Vision model using the joke as description"""

    try:
        # Generate an image based on joke
        image_prompt = f"Generate an image based on the following joke {joke}"
        vision_model = ImageGenerationModel.from_pretrained(os.getenv("VISION_MODEL"))
        image = vision_model.generate_images(prompt=image_prompt)[0]

        # save image
        img_path = os.path.join('static', 'images', 'image.png')
        with open(img_path, "wb") as f:
            filename = f.name
            image.save(filename, include_generation_parameters=False)

        return img_path

    except Exception as e:
        logging.info("Error generting image for the joke")
        return None

